import { NextRequest, NextResponse } from 'next/server';
import { connectToDatabase } from '@/lib/db';
import '@/lib/models'; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
import { Achievement, Challenge } from '@/lib/models';

export async function POST(request: NextRequest) {
  try {
    await connectToDatabase();
    
    // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievements = [
      {
        code: 'FIRST_WATER',
        title: '–ü–µ—Ä–≤—ã–π –ø–æ–ª–∏–≤',
        description: '–ü–æ–ª–∏–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤–ø–µ—Ä–≤—ã–µ',
        iconUrl: 'üíß',
        criteria: {
          type: 'plant_care',
          params: {
            actionType: 'water',
            count: 1
          }
        },
        rarity: 'common',
        reward: {
          currency: 5,
          experience: 10
        }
      },
      {
        code: 'WATER_MASTER',
        title: '–ú–∞—Å—Ç–µ—Ä –ø–æ–ª–∏–≤–∞',
        description: '–ü–æ–ª–∏–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è 10 —Ä–∞–∑',
        iconUrl: 'üåä',
        criteria: {
          type: 'plant_care',
          params: {
            actionType: 'water',
            count: 10
          }
        },
        rarity: 'rare',
        reward: {
          currency: 20,
          experience: 50
        }
      },
      {
        code: 'FERTILIZER_EXPERT',
        title: '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ —É–¥–æ–±—Ä–µ–Ω–∏—è–º',
        description: '–ü–æ–¥–∫–æ—Ä–º–∏–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è 5 —Ä–∞–∑',
        iconUrl: 'üå±',
        criteria: {
          type: 'plant_care',
          params: {
            actionType: 'fertilize',
            count: 5
          }
        },
        rarity: 'rare',
        reward: {
          currency: 15,
          experience: 30
        }
      },
      {
        code: 'LEVEL_10',
        title: '–†–∞—Å—Ç—É—â–∏–π —Å–∞–¥–æ–≤–æ–¥',
        description: '–î–æ—Å—Ç–∏–≥–ª–∏ 10 —É—Ä–æ–≤–Ω—è —Å —Ä–∞—Å—Ç–µ–Ω–∏–µ–º',
        iconUrl: '‚≠ê',
        criteria: {
          type: 'level_reach',
          params: {
            level: 10
          }
        },
        rarity: 'epic',
        reward: {
          currency: 50,
          experience: 100
        }
      },
      {
        code: 'CURRENCY_100',
        title: '–ë–æ–≥–∞—Ç—ã–π —Å–∞–¥–æ–≤–æ–¥',
        description: '–ù–∞–∫–æ–ø–∏–ª–∏ 100 –ª–∏—Å—Ç–æ—á–∫–æ–≤',
        iconUrl: 'üçÉ',
        criteria: {
          type: 'currency_earn',
          params: {
            currency: 100
          }
        },
        rarity: 'epic',
        reward: {
          currency: 25,
          experience: 75
        }
      }
    ];

    for (const achievement of achievements) {
      const existing = await Achievement.findOne({ code: achievement.code });
      if (!existing) {
        await Achievement.create(achievement);
        console.log(`Created achievement: ${achievement.title}`);
      }
    }

    // –°–æ–∑–¥–∞–µ–º —á–µ–ª–ª–µ–Ω–¥–∂–∏
    const now = new Date();
    const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
    
    const challenges = [
      {
        code: 'DAILY_WATER',
        title: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–ª–∏–≤',
        description: '–ü–æ–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏',
        startDate: now,
        endDate: nextWeek,
        requirements: [
          {
            action: 'water',
            count: 7,
            description: '–ü–æ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è 7 —Ä–∞–∑'
          }
        ],
        reward: {
          currency: 30,
          experience: 60
        },
        difficulty: 'easy',
        category: 'daily'
      },
      {
        code: 'FERTILIZER_WEEK',
        title: '–ù–µ–¥–µ–ª—è —É–¥–æ–±—Ä–µ–Ω–∏–π',
        description: '–ü–æ–¥–∫–∞—Ä–º–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤—Å—é –Ω–µ–¥–µ–ª—é',
        startDate: now,
        endDate: nextWeek,
        requirements: [
          {
            action: 'fertilize',
            count: 5,
            description: '–ü–æ–¥–∫–æ—Ä–º–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è 5 —Ä–∞–∑'
          }
        ],
        reward: {
          currency: 40,
          experience: 80
        },
        difficulty: 'medium',
        category: 'weekly'
      },
      {
        code: 'COMPLETE_CARE',
        title: '–ü–æ–ª–Ω—ã–π —É—Ö–æ–¥',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –≤–∏–¥—ã —É—Ö–æ–¥–∞ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏',
        startDate: now,
        endDate: nextWeek,
        requirements: [
          {
            action: 'water',
            count: 3,
            description: '–ü–æ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è 3 —Ä–∞–∑–∞'
          },
          {
            action: 'fertilize',
            count: 2,
            description: '–ü–æ–¥–∫–æ—Ä–º–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è 2 —Ä–∞–∑–∞'
          },
          {
            action: 'prune',
            count: 1,
            description: '–û–±—Ä–µ–∑–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è 1 —Ä–∞–∑'
          }
        ],
        reward: {
          currency: 60,
          experience: 120
        },
        difficulty: 'hard',
        category: 'weekly'
      }
    ];

    for (const challenge of challenges) {
      const existing = await Challenge.findOne({ code: challenge.code });
      if (!existing) {
        await Challenge.create(challenge);
        console.log(`Created challenge: ${challenge.title}`);
      }
    }

    return NextResponse.json({
      success: true,
      message: 'Test data created successfully'
    });

  } catch (error) {
    console.error('Error creating test data:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
} 